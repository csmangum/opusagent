#!/usr/bin/env python3
"""
Simple runner script for LocalRealtimeClient validation.

This script provides a convenient way to run the comprehensive validation
with proper error handling and formatted output.
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from scripts.validate_local_realtime_client import LocalRealtimeClientValidator


async def run_validation():
    """Run the validation with nice formatting."""
    print("üîç LocalRealtimeClient Validation")
    print("=" * 50)
    print("This will test all aspects of the LocalRealtimeClient including:")
    print("‚Ä¢ Client initialization and configuration")
    print("‚Ä¢ Response configuration management")
    print("‚Ä¢ Intent detection and keyword matching")
    print("‚Ä¢ Conversation context management")
    print("‚Ä¢ WebSocket connection lifecycle")
    print("‚Ä¢ Performance metrics and timing")
    print("‚Ä¢ Error handling and edge cases")
    print("‚Ä¢ Smart response selection algorithms")
    print("‚Ä¢ Session state management")
    print("=" * 50)
    
    try:
        # Run validation with verbose output
        validator = LocalRealtimeClientValidator(verbose=True)
        success = await validator.run_all_tests()
        
        if success:
            print("\nüéâ Validation completed successfully!")
            print("All tests passed - LocalRealtimeClient is working correctly.")
            return 0
        else:
            print("\n‚ùå Validation completed with failures.")
            print("Please review the failed tests above.")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Validation interrupted by user.")
        return 1
    except Exception as e:
        print(f"\nüí• Unexpected error during validation: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(run_validation())
    sys.exit(exit_code)
