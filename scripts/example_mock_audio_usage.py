#!/usr/bin/env python3
"""
Example: Using Generated Audio Files with MockRealtimeClient

This script demonstrates how to use the audio files generated by generate_mock_audio.py
with the MockRealtimeClient for testing and development.

Prerequisites:
1. Run generate_mock_audio.py first to create audio files
2. Ensure you have the required dependencies installed

Usage:
    python scripts/example_mock_audio_usage.py
"""

import asyncio
import sys
from pathlib import Path

# Add the project root to the path for imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from opusagent.mock.mock_realtime_client import MockRealtimeClient, MockResponseConfig
from opusagent.mock.mock_factory import create_customer_service_mock


async def example_basic_usage():
    """Example of basic MockRealtimeClient usage with generated audio."""
    print("=== Basic MockRealtimeClient Usage ===")
    
    # Create a mock client with custom response configurations
    mock_client = MockRealtimeClient()
    
    # Add response configurations using generated audio files
    mock_client.add_response_config(
        "greeting",
        MockResponseConfig(
            text="Hello! Welcome to our customer service. How can I help you today?",
            audio_file="demo/audio/mock/greetings/greetings_01.wav",
            delay_seconds=0.03,
            audio_chunk_delay=0.15
        )
    )
    
    mock_client.add_response_config(
        "card_help",
        MockResponseConfig(
            text="I can help you replace your lost card right away.",
            audio_file="demo/audio/mock/card_replacement/card_replacement_01.wav",
            delay_seconds=0.04,
            audio_chunk_delay=0.2
        )
    )
    
    mock_client.add_response_config(
        "farewell",
        MockResponseConfig(
            text="Thank you for your time. Have a great day!",
            audio_file="demo/audio/mock/farewells/farewells_01.wav",
            delay_seconds=0.03,
            audio_chunk_delay=0.15
        )
    )
    
    print("✓ Mock client configured with audio files")
    print("✓ Response configurations added")
    
    # Simulate a conversation
    print("\nSimulating conversation...")
    
    # Simulate greeting
    print("User: Hi, I need help")
    greeting_config = mock_client.get_response_config("greeting")
    print(f"Bot: {greeting_config.text}")
    
    # Simulate card replacement request
    print("User: I lost my card")
    card_config = mock_client.get_response_config("card_help")
    print(f"Bot: {card_config.text}")
    
    # Simulate farewell
    print("User: Thanks, that's all")
    farewell_config = mock_client.get_response_config("farewell")
    print(f"Bot: {farewell_config.text}")
    
    print("\n✓ Basic usage example completed")


async def example_factory_usage():
    """Example using the factory functions with generated audio."""
    print("\n=== Factory Function Usage ===")
    
    # Create a customer service mock with audio files
    mock_client = create_customer_service_mock(
        audio_dir="demo/audio/mock"
    )
    
    print("✓ Customer service mock created with factory function")
    print(f"✓ Available response configs: {list(mock_client.response_configs.keys())}")
    
    # Test a response
    config = mock_client.get_response_config()
    print(f"✓ Default response: {config.text[:50]}...")
    
    if config.audio_file:
        print(f"✓ Audio file: {config.audio_file}")
    else:
        print("✓ Using generated silence")


async def example_audio_file_loading():
    """Example of loading and caching audio files."""
    print("\n=== Audio File Loading Example ===")
    
    mock_client = MockRealtimeClient()
    
    # Test loading an audio file
    audio_file_path = "demo/audio/mock/greetings/greetings_01.wav"
    
    try:
        audio_data = await mock_client.load_audio_file(audio_file_path)
        print(f"✓ Loaded audio file: {audio_file_path}")
        print(f"✓ Audio data size: {len(audio_data)} bytes")
        
        # Test caching (should use cached version)
        cached_audio = await mock_client.load_audio_file(audio_file_path)
        print(f"✓ Cached audio loaded: {len(cached_audio)} bytes")
        
    except FileNotFoundError:
        print(f"⚠️  Audio file not found: {audio_file_path}")
        print("   Run generate_mock_audio.py first to create audio files")
    
    # Test loading non-existent file (should generate silence)
    silence_data = await mock_client.load_audio_file("non_existent_file.wav")
    print(f"✓ Generated silence: {len(silence_data)} bytes")


async def example_function_calls():
    """Example of function call simulation with audio."""
    print("\n=== Function Call Example ===")
    
    mock_client = MockRealtimeClient()
    
    # Add a response config with function call
    mock_client.add_response_config(
        "verify_user",
        MockResponseConfig(
            text="I'll verify your information now.",
            audio_file="demo/audio/mock/confirmations/confirmations_01.wav",
            function_call={
                "name": "verify_user_identity",
                "arguments": {
                    "user_id": "12345",
                    "verification_type": "card_replacement"
                }
            }
        )
    )
    
    config = mock_client.get_response_config("verify_user")
    print(f"✓ Response text: {config.text}")
    if config.function_call:
        print(f"✓ Function call: {config.function_call['name']}")
        print(f"✓ Arguments: {config.function_call['arguments']}")
    else:
        print("✓ No function call configured")


async def example_websocket_simulation():
    """Example of WebSocket connection simulation."""
    print("\n=== WebSocket Simulation Example ===")
    
    mock_client = MockRealtimeClient()
    
    # Add some response configs
    mock_client.add_response_config(
        "welcome",
        MockResponseConfig(
            text="Welcome to our service!",
            audio_file="demo/audio/mock/greetings/greetings_02.wav"
        )
    )
    
    try:
        # Try to connect to a mock server (this will fail if no server is running)
        await mock_client.connect("ws://localhost:8080")
        print("✓ Connected to mock server")
        
        # Simulate some events
        await mock_client._send_session_created()
        print("✓ Session created event sent")
        
        # Clean up
        await mock_client.disconnect()
        print("✓ Disconnected from mock server")
        
    except Exception as e:
        print(f"⚠️  Connection failed (expected if no server running): {e}")
        print("   This is normal - the mock client can work without a server")


def check_audio_files():
    """Check if audio files exist and provide guidance."""
    print("=== Audio Files Check ===")
    
    audio_dir = Path("demo/audio/mock")
    if not audio_dir.exists():
        print("❌ Audio directory not found: demo/audio/mock")
        print("   Run the following command to generate audio files:")
        print("   python scripts/generate_mock_audio.py")
        return False
    
    # Check for scenario directories
    scenarios = ["greetings", "customer_service", "card_replacement", "farewells"]
    missing_scenarios = []
    
    for scenario in scenarios:
        scenario_dir = audio_dir / scenario
        if not scenario_dir.exists():
            missing_scenarios.append(scenario)
        else:
            wav_files = list(scenario_dir.glob("*.wav"))
            print(f"✓ {scenario}: {len(wav_files)} audio files")
    
    if missing_scenarios:
        print(f"⚠️  Missing scenarios: {missing_scenarios}")
        print("   Run generate_mock_audio.py to create all scenarios")
        return False
    
    print("✓ All audio files found and ready to use")
    return True


async def main():
    """Main function to run all examples."""
    print("MockRealtimeClient Audio Usage Examples")
    print("=" * 50)
    
    # Check if audio files exist
    audio_files_ready = check_audio_files()
    
    if not audio_files_ready:
        print("\nTo generate audio files, run:")
        print("python scripts/generate_mock_audio.py")
        print("\nOr generate specific scenarios:")
        print("python scripts/generate_mock_audio.py --scenario greetings")
        print("python scripts/generate_mock_audio.py --scenario customer_service")
        return
    
    # Run examples
    await example_basic_usage()
    await example_factory_usage()
    await example_audio_file_loading()
    await example_function_calls()
    await example_websocket_simulation()
    
    print("\n" + "=" * 50)
    print("All examples completed!")
    print("\nNext steps:")
    print("1. Use MockRealtimeClient in your tests")
    print("2. Create custom response configurations")
    print("3. Integrate with your WebSocket manager")
    print("4. Test different scenarios and voices")


if __name__ == "__main__":
    asyncio.run(main()) 